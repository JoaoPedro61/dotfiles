#!/usr/bin/env bash

# Enable immediate exit on errors
set -e

# Set variables
is_wsl=0
temp_dir=/tmp
script_dir="$(dirname "$(realpath "$0")")"

# Check if WSL
if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
  is_wsl=1
fi

# Log function
function log() {
  echo "$@"
}

# Helper function to ensure directory exists
function ensure_dir() {
  local dir=$1
  if [ ! -d "$dir" ]; then
    log "Creating directory: $dir"
    mkdir -p "$dir" || {
      log "Failed to create $dir"
      exit 1
    }
    log "Directory created: $dir"
  fi
}

# Helper function to remove a file or directory if it exists
function remove_if_exists() {
  local path=$1
  if [ -e "$path" ]; then
    log "Removing: $path"
    rm -rf "$path" || {
      log "Failed to remove $path"
      exit 1
    }
    log "Removed: $path"
  fi
}

# Helper function to remove a bin if it exists
function remove_bin_if_exists() {
  local path=$1
  if [ -e "$path" ]; then
    log "Removing: $path"
    sudo rm "$path" || {
      log "Failed to remove $path"
      exit 1
    }
    log "Removed: $path"
  fi
}

# Helper function to create symlink
function create_symlink() {
  local target=$1
  local link=$2
  log "Creating symlink: $link -> $target"
  ln -s "$target" "$link" || {
    log "Failed to create symlink $link"
    exit 1
  }
  log "Symlink created: $link"
}

# Setup system links
function setup_syslinks() {
  log "Setting up system links:"

  # Ensure directories
  ensure_dir "$HOME/.config"
  ensure_dir "$HOME/.fonts"

  # Remove old links and files
  remove_if_exists "$HOME/.config/nvim"
  remove_if_exists "$HOME/.config/alacritty"
  remove_if_exists "$HOME/.fonts/MesloLGS"
  remove_if_exists "$HOME/.default-gems"
  remove_if_exists "$HOME/.default-perl-modules"

  # Create new symlinks
  create_symlink "$script_dir/.default-perl-modules" "$HOME/.default-perl-modules"
  create_symlink "$script_dir/.default-gems" "$HOME/.default-gems"
  create_symlink "$script_dir/.fonts/MesloLGS" "$HOME/.fonts/MesloLGS"
  create_symlink "$script_dir/.config/nvim" "$HOME/.config/nvim"
  create_symlink "$script_dir/.config/alacritty" "$HOME/.config/alacritty"
}

# Install common dependencies
function install_common_dependencies() {
  log "Installing common dependencies:"
  sudo apt install -y build-essential curl wget git python3 python3-pip python3-dev python3-neovim libreadline-dev unzip cmake g++ pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev scdoc htop coreutils fd-find ripgrep zsh libz-dev libssl-dev libffi-dev libyaml-dev || {
    log "Failed to install common dependencies"
    exit 1
  }
  log "Common dependencies installed"
}

# Install Rust
function install_rust_lang() {
  log "Installing Rust:"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || {
    log "Failed to install Rust"
    exit 1
  }
  log "Rust installed"
}

# Install Lua
function install_lua_lang() {
  log "Installing Lua:"
  local version="lua-5.4.7"
  local url="https://www.lua.org/ftp/${version}.tar.gz"
  if [ ! -d "$temp_dir/$version" ]; then
    curl --proto '=https' --tlsv1.2 -sSf -L -R "$url" | tar zx -C "$temp_dir" || {
      log "Failed to download Lua"
      exit 1
    }
  else
    log "Skipping download of Lua tar file: $url"
  fi
  cd "$temp_dir/$version" && make all test && sudo make install || {
    log "Failed to install Lua"
    exit 1
  }
  log "Lua installed"
}

# Install LuaRocks plugin
function install_luarocks_plugin() {
  log "Installing LuaRocks plugin $1"
  luarocks install "$1" || {
    log "Failed to install LuaRocks plugin $1"
    exit 1
  }
}

# Install LuaRocks
function install_luarocks() {
  log "Installing LuaRocks:"
  local version="luarocks-3.11.1"
  local url="https://luarocks.github.io/luarocks/releases/$version.tar.gz"
  if [ ! -d "$temp_dir/$version" ]; then
    curl --proto '=https' --tlsv1.2 -sSf -L -R "$url" | tar zx -C "$temp_dir" || {
      log "Failed to download LuaRocks"
      exit 1
    }
  else
    log "Skipping download of LuaRocks tar file: $url"
  fi
  cd "$temp_dir/$version" && ./configure --with-lua-include=/usr/local/include && make && sudo make install || {
    log "Failed to install LuaRocks"
    exit 1
  }
  log "LuaRocks installed"

  install_luarocks_plugin jsregexp
}

# Install asdf plugin
function install_asdf_plugin() {
  log "Installing asdf plugin: $1"
  asdf plugin add "$1" "$2" || {
    log "Failed to add asdf plugin $1"
    exit 1
  }
  asdf install "$1" "$3" || {
    log "Failed to install $1 plugin"
    exit 1
  }
  asdf global "$1" "$3" || {
    log "Failed to set global version for $1"
    exit 1
  }
  log "asdf plugin $1 installed"
}

# Install asdf
function install_asdf() {
  log "Installing asdf:"
  local version="v0.14.1"
  local url="https://github.com/asdf-vm/asdf.git"
  local dest_path="$HOME/.asdf"
  if [ ! -d "$dest_path" ]; then
    git clone "$url" "$dest_path" --branch "$version" || {
      log "Failed to clone asdf repository"
      exit 1
    }
  else
    log "Skipping asdf installation (already installed)"
  fi
  source "$dest_path/asdf.sh"
  log "asdf installed"
  install_asdf_plugin nodejs https://github.com/asdf-vm/asdf-nodejs.git latest
  install_asdf_plugin ruby https://github.com/asdf-vm/asdf-ruby.git latest
  install_asdf_plugin golang https://github.com/asdf-community/asdf-golang.git latest
  install_asdf_plugin elixir https://github.com/asdf-vm/asdf-elixir.git latest
  install_asdf_plugin perl https://github.com/ouest/asdf-perl.git latest
}

# Install NeoVim
function install_neovim() {
  log "Installing NeoVim:"
  local version="v0.10.2"
  local file_name="nvim-linux64"
  local dest_path="$HOME/.nvim"
  local url="https://github.com/neovim/neovim/releases/download/$version/$file_name.tar.gz"
  gem install neovim || {
    log "Failed to install NeoVim ruby package"
    exit 1
  }
  gem environment || {
    log "Failed to set NeoVim ruby package"
    exit 1
  }
  npm i -g neovim || {
    log "Failed to install NeoVim Node.js package"
    exit 1
  }
  if [ ! -d "$temp_dir/$file_name" ]; then
    curl --proto '=https' --tlsv1.2 -sSf -L -R "$url" | tar zx -C "$temp_dir" || {
      log "Failed to download NeoVim"
      exit 1
    }
  else
    log "Skipping download of NeoVim"
  fi
  rm -rf "$dest_path" && mv "$temp_dir/$file_name" "$dest_path" || {
    log "Failed to install NeoVim"
    exit 1
  }
  export PATH="$PATH:$dest_path/bin"
  log "NeoVim installed"
}

# Install Alacritty
function install_alacritty() {
  if [ $is_wsl -eq 1 ]; then
    log "Skipping Alacritty installation because running in WSL"
    return
  fi
  log "Installing Alacritty:"
  log "Source RustLang to use cargo command"
  source $HOME/.cargo/env || {
    log "Failed to source cargo and rust toolchain"
    exit 1
  }
  remove_if_exists "$temp_dir/alacritty"
  git clone https://github.com/alacritty/alacritty.git "$temp_dir/alacritty" || {
    log "Failed to clone Alacritty repository"
    exit 1
  }
  cd "$temp_dir/alacritty" && cargo build --release || {
    log "Failed to build Alacritty"
    exit 1
  }
  remove_bin_if_exists /usr/local/bin/alacritty
  sudo cp target/release/alacritty /usr/local/bin || {
    log "Failed to copy Alacritty binary"
    exit 1
  }
  sudo tic -xe alacritty,alacritty-direct extra/alacritty.info || {
    log "Failed to create application desktop information"
    exit 1
  }
  if [ -f /usr/share/pixmaps/Alacritty.svg ]; then
    sudo rm /usr/share/pixmaps/Alacritty.svg
  fi
  sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg || {
    log "Failed to copy application desktop icon"
    exit 1
  }
  sudo desktop-file-install extra/linux/Alacritty.desktop || {
    log "Failed to install application desktop entry"
    exit 1
  }
  sudo update-desktop-database || {
    log "Failed to update desktop database"
    exit 1
  }

  ensure_dir $HOME/.zsh_functions
  ensure_dir $HOME/.bash_completion

  remove_if_exists $HOME/.zsh_functions/_alacritty
  remove_if_exists $HOME/.bash_completion/alacritty

  cp extra/completions/_alacritty $HOME/.zsh_functions/_alacritty || {
    log "Failed to copy alacritty completions to ZSH functions"
    exit 1
  }
  cp extra/completions/alacritty.bash $HOME/.bash_completion/alacritty || {
    log "Failed to copy alacritty completions to bash"
    exit 1
  }

  log "Alacritty installed"
}

function setup_zsh() {
  log "Setting up ZSH:"

  # Check if zsh is installed
  if command -v zsh &>/dev/null; then
    log "ZSH found, changing default shell..."

    # Change default shell to zsh
    echo "Please type your password to change the default shell:"
    chsh -s "$(which zsh)"

    # Check if chsh command succeeded
    if [ $? -eq 0 ]; then
      log "ZSH successfully configured as default shell."
    else
      exit 1
    fi
  else
    log "ZSH is not installed. Please install it and try again."
  fi
}

setup_syslinks
install_common_dependencies
install_rust_lang
install_lua_lang
install_luarocks
install_asdf
install_neovim
install_alacritty
setup_zsh
